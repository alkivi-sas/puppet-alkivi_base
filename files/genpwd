#!/bin/bash
set -e

#
#   Display help
#
help()
{
    cat <<EOF
    $PROGNAME : [OPTIONS]
    --save            Set the filename
    --savedir         Set the path where to store password (default /root/.passwd)
    --print           Print the password to stdout (puppet use that) 
    --hash            Print the password hash to stdout (puppet use that) 
    --force           Regenerate password

EOF
}



ID=`id -u`
if [ "$ID" -ne "0" ]; then
    echo "Script must be run as root"
    exit 2
fi

ROOTDIR=/root/.passwd
PRINT=0
LENGTH=15
HASH=0
FORCE=0

# Parse command line
while [ "$#" -gt 0 ] ; do
    case $1 in
        --help)
            help
            exit 0
            ;;
        --save)
            NAME=$2
            shift
            ;;
        --savedir)
            ROOTDIR=$2
            shift    
            ;;
        --print)
            PRINT=1
            ;;
        --hash)
            HASH=1
            ;;
        --force)
            FORCE=1
            ;;
        --length)
            LENGTH=$2
            shift
            ;;
        *)
            echo "Unknown option '$1'"
            exit 1
            ;;
    esac
    shift
done



# No name, print directly
if [ -z "$NAME" ]; then
    echo -n $PASSWORD
    exit 0
fi

PASSWORD_FILE="$ROOTDIR/$NAME"
HASH_FILE="$ROOTDIR/.hash_$NAME"

# Ensure rootdir is present 
if [ ! -d "$ROOTDIR" ]; then
    mkdir -p $ROOTDIR
    chmod 700 $ROOTDIR
fi


# Generate password file if needed
# Force or not existent
if [ $FORCE -eq 1 -o ! -f "$PASSWORD_FILE" ]; then
    PASSWORD=`< /dev/urandom tr -dc abcdefghkmnoprstwxzABCDEFGHJKLMNPQRTWXY23456789 | head -c\${1:-$LENGTH};echo;`
    echo $PASSWORD > $PASSWORD_FILE
    chmod 600 $PASSWORD_FILE
else
    PASSWORD=`cat $PASSWORD_FILE`
fi

# Generate hash file if needed
# Force or not existent
if [ $FORCE -eq 1 -o ! -f "$HASH_FILE" ]; then
    REALHASH=`mkpasswd -m sha-512 $PASSWORD`
    echo $REALHASH > $HASH_FILE
    chmod 600 $HASH_FILE
else
    REALHASH=`cat $HASH_FILE`
fi

if [ $PRINT -eq 0 ]; then
    if [ $HASH -eq 1 ]; then
        echo "Password hash generated in $HASH_FILE"
    else
        echo "Password generated in $PASSWORD_FILE"
    fi
    exit 2
else
    if [ $HASH -eq 1 ]; then
        echo -n `cat $HASH_FILE`
    else
        echo -n  `cat $PASSWORD_FILE`
    fi
    exit 0
fi

